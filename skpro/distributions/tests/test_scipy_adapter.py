import numpy as np
import pytest
from skbase.testing import QuickTester

from skpro.tests.test_all_estimators import BaseFixtureGenerator, PackageConfig


class ScipyDistributionFixtureGenerator(BaseFixtureGenerator):
    """Fixture generator for scipy distributions adapter.

    Fixtures parameterized
    ----------------------
    object_class: object inheriting from BaseObject
        ranges over object classes not excluded by EXCLUDE_OBJECTS, EXCLUDED_TESTS
    object_instance: instance of object inheriting from BaseObject
        ranges over object classes not excluded by EXCLUDE_OBJECTS, EXCLUDED_TESTS
        instances are generated by create_test_instance class method
    """

    object_type_filter = "scipy_distribution_adapter"


class TestScipyAdapter(PackageConfig, ScipyDistributionFixtureGenerator, QuickTester):
    """Test the scipy adapter."""

    METHOD_TESTS = {
        "NO_PARAMS": [("mean", "mean"), ("var", "var")],
        "X_PARAMS": [("cdf", "cdf"), ("ppf", "ppf")],
        "CONTINUOUS": [("pdf", "pdf"), ("log_pdf", "logpdf")],
        "DISCRETE": [("pmf", "pmf"), ("log_pmf", "logpmf")],
    }

    @pytest.mark.parametrize("method,scipy_method", METHOD_TESTS["NO_PARAMS"])
    def test_method_no_params(self, object_instance, method, scipy_method):
        """Test method that doesn't need additional parameters."""
        res = getattr(object_instance, method)()
        params = object_instance._get_scipy_param()
        scipy_obj = object_instance._get_scipy_object()

        scipy_res = getattr(scipy_obj, scipy_method)(*params[0], **params[1])

        assert np.allclose(res, scipy_res)

    @pytest.mark.parametrize("method,scipy_method", METHOD_TESTS["X_PARAMS"])
    def test_method_with_x_params(self, object_instance, method, scipy_method):
        """Test method that needs x as parameter."""
        x = 0.5
        res = getattr(object_instance, method)(x)
        params = object_instance._get_scipy_param()
        scipy_obj = object_instance._get_scipy_object()

        scipy_res = getattr(scipy_obj, scipy_method)(x, *params[0], **params[1])

        assert np.allclose(res, scipy_res)

    @pytest.mark.parametrize("method,scipy_method", METHOD_TESTS["CONTINUOUS"])
    def test_method_continuous_dist(self, object_instance, method, scipy_method):
        """Test continuous distribution method."""
        x = 0.5

        res = getattr(object_instance, method)(x)
        if object_instance._tags["distr:measuretype"] != "continuous":
            scipy_res = 0
        else:
            params = object_instance._get_scipy_param()
            scipy_obj = object_instance._get_scipy_object()
            scipy_res = getattr(scipy_obj, scipy_method)(x, *params[0], **params[1])

        assert np.allclose(res, scipy_res)

    @pytest.mark.parametrize("method,scipy_method", METHOD_TESTS["DISCRETE"])
    def test_method_discrete_dist(self, object_instance, method, scipy_method):
        """Test discrete distribution method."""
        x = 0.5

        res = getattr(object_instance, method)(x)
        if object_instance._tags["distr:measuretype"] != "discrete":
            scipy_res = 0
        else:
            params = object_instance._get_scipy_param()
            scipy_obj = object_instance._get_scipy_object()
            scipy_res = getattr(scipy_obj, scipy_method)(x, *params[0], **params[1])

        assert np.allclose(res, scipy_res)
